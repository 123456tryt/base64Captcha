// Copyright 2017 Eric Zhou. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//Package base64Captcha creates digits captcha of base64-encoding png.
// base64Captcha is used for rapid development of RESTful APIs, web apps and backend services in Go. give a string identifier to the package and it returns with a base64-encoding-png-string
package base64Captcha

import (
	"encoding/base64"
	"fmt"
	"io"
	"log"
	"os"
	"path"
	"path/filepath"
	"runtime"
	"time"
)

var (
	// GCLimitNumber The number of captchas created that triggers garbage collection used by default store.
	// 默认图像验证GC清理的上限个数
	GCLimitNumber = 10240
	// Expiration time of captchas used by default store.
	// 内存保存验证码的时限
	Expiration = 10 * time.Minute
	// globalStore is a shared storage for captchas, generated by New function.
	// 默认内存储存
	globalStore = NewMemoryStore(GCLimitNumber, Expiration)
	//thisPackageDirPath current package path.
	thisPackageDirPath = ""
)

//CaptchaInterface captcha interface for captcha engine to to write staff
type CaptchaInterface interface {
	//BinaryEncodeing covert to bytes
	BinaryEncodeing() []byte
	//WriteTo output captcha entity
	WriteTo(w io.Writer) (n int64, err error)
}

//CaptchaWriteToBase64Encoding converts captcha to base64 encoding string.
//mimeType is one of "audio/wav" "image/png".
func CaptchaWriteToBase64Encoding(cap CaptchaInterface) string {
	binaryData := cap.BinaryEncodeing()

	mimeType := MimeTypeCaptchaImage
	_, ok := cap.(*Audio)
	if ok {
		mimeType = MimeTypeCaptchaAudio
	}

	return fmt.Sprintf("data:%s;base64,%s", mimeType, base64.StdEncoding.EncodeToString(binaryData))
}

//CaptchaWriteToFile output captcha to file.
//fileExt is one of "png","wav"
func CaptchaWriteToFile(cap CaptchaInterface, outputDir, fileName, fileExt string) error {
	filePath := filepath.Join(outputDir, fileName+"."+fileExt)
	file, err := os.Create(filePath)
	if err != nil {
		fmt.Printf("%s is invalid path.error:%v", filePath, err)
		return err
	}
	defer file.Close()
	_, err = cap.WriteTo(file)
	return err
}

//CaptchaItem captcha basic information.
type CaptchaItem struct {
	//Content captcha entity content.
	Content string
	//VerifyValue captcha verify value.
	VerifyValue string
	//ImageWidth image width pixel.
	ImageWidth int
	//ImageHeight image height pixel.
	ImageHeight int
}

func init() {
	//get current package dir path
	_, filename, _, ok := runtime.Caller(0)
	if !ok {
		panic("No caller information")
	}
	packageDirPath := path.Dir(filename)
	//loading fonts for engine char
	readFontsToSliceOfBytes(packageDirPath+"/fonts", ".ttf")
}

// VerifyCaptcha by given id key, return boolean value.
// 验证图像验证码,返回boolean.
func VerifyCaptcha(identifier, verifyValue string) bool {
	if verifyValue == "" {
		return false
	}
	storeValue := globalStore.Get(identifier, false)
	if storeValue == "" {
		return false
	}
	result := storeValue == verifyValue
	if result {
		globalStore.Get(identifier, true)
	}
	return result
}

//GenerateCaptcha create captch by config struct.
func GenerateCaptcha(idKey string, configuration interface{}) (id string, captchaInstance CaptchaInterface) {
	if idKey == "" {
		idKey = RandomId()
	}
	id = idKey
	var verifyValue string
	switch config := configuration.(type) {
	case ConfigAudio:
		audio := EngineAudioCreate(idKey, config)
		verifyValue = audio.VerifyValue
		captchaInstance = audio

	case ConfigCharacter:
		char := EngineCharCreate(config)
		verifyValue = char.VerifyValue
		captchaInstance = char

	case ConfigDigit:
		dig := EngineDigitsCreate(idKey, config)
		verifyValue = dig.VerifyValue
		captchaInstance = dig

	default:
		log.Println("config type not supported", config)
	}

	globalStore.Set(idKey, verifyValue)

	return idKey, captchaInstance
}
